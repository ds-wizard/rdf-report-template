{#- ------------------------------------------------------------------------------------ -#}
{#-  GENERAL MACROS                                                                      -#}
{#- ------------------------------------------------------------------------------------ -#}

{%- macro renderList(list, strBefore, strAfter) -%}
  {%- set resultList = [] -%}
    {%- for item in list -%}
    {%- do resultList.append(strBefore+item+strAfter) -%}
    {%- endfor -%}
    {{resultList|join(", ") }}
{%- endmacro -%}

{#- ------------------------------------------------------------------------------------ -#}
{#- KNOWLEDGE MODEL MACROS                                                               -#}
{#- ------------------------------------------------------------------------------------ -#}

{%- macro renderPhase(phase, index) -%}
km:{{phase.uuid}} a dsw:Phase ;
  dsw:uuid "{{phase.uuid}}" ;
  dsw:title {{phase.title|tojson}} ;
  
  {%- if phase.description %}
  dsw:description {{phase.description|tojson}} ;
  {%- endif %}
  {%- if phase.annotations %}
  {{ renderAnnotation(phase.annotations) }} ;
  {%- endif %}
  dsw:order "{{index}}"^^xsd:integer ;
  dsw:hasParent km:{{ctx.knowledgeModel.uuid}} .
{%- endmacro -%}

{%- macro renderTag(tag, index) -%}
km:{{tag.uuid}} a dsw:Tag ;
  dsw:uuid "{{tag.uuid}}" ;
  dsw:title {{tag.name|tojson}} ;
  
  {%- if tag.description %}
  dsw:description {{tag.description|tojson}} ;
  {%- endif %}
  dsw:color "{{tag.color}}" ;
  {%- if tag.annotations %}
  {{ renderAnnotation(tag.annotations) }} ;
  {%- endif %}
  dsw:order "{{index}}"^^xsd:integer ;
  dsw:hasParent km:{{ctx.knowledgeModel.uuid}} .
{%- endmacro -%}

{%- macro renderExpert(expert, index) -%}
km:{{expert.uuid}} a dsw:Expert ;
  dsw:uuid "{{expert.uuid}}" ;
  dsw:title {{expert.name|tojson}} ;
  dsw:email "{{expert.email}}" ;
  {%- if expert.annotations %}
  {{ renderAnnotation(expert.annotations) }} ;
  {%- endif %}
  {%- if expertOrder[expert.uuid] -%}
  dsw:order "{{expertOrder[expert.uuid]}}"^^xsd:integer ;
  {%- endif -%}
  dsw:hasParent km:{{questionExpertUuidParent[expert.uuid]}} .
{%- endmacro -%}

{%- macro renderAnnotation(annotations) -%}
{%- if annotations|length > 0 -%}
  dsw:annotation
  {%- for annotation in annotations %}
    [ a dsw:KeyValueEntry ;
      dsw:entryKey {{annotation.key|tojson}} ;
      dsw:entryValue {{annotation.value|tojson}} ]
      {%- if not loop.last -%} ,
      {%- endif -%}
{%- endfor -%}
{%- endif -%}
{%- endmacro -%}

{%- macro renderChapter(chapter, index) -%}
km:{{chapter.uuid}} a dsw:Chapter ;
  dsw:uuid "{{chapter.uuid}}" ;
  dsw:title {{chapter.title|tojson}} ;
  {%- if chapter.text %}
  dsw:description {{chapter.text|tojson}} ;
  {%- endif -%}

  {%- set questions = renderList(chapter.questionUuids, "km:", "") -%}
  {%- if questions|length > 0 %}
  dsw:containsQuestion {{ questions.split(',')|join(", ")}} ;
  {%- endif %}
  {%- if chapter.annotations %}
  {{ renderAnnotation(chapter.annotations) }} ;
  {%- endif %}
  dsw:order "{{index}}"^^xsd:integer ;
  dsw:hasParent km:{{ctx.knowledgeModel.uuid}} .
{%- endmacro -%}

{#- ------------------------------------------------------------------------------------ -#}
{#-  KM - REFERENCE MACROS                                                               -#}
{#- ------------------------------------------------------------------------------------ -#}

{%- macro renderReference(reference) -%}
  dsw:uuid "{{reference.uuid}}" ;
  {%- if reference.annotations -%}
  {{ renderAnnotation(reference.annotations) }} ;
  {%- endif %}
  dsw:hasParent km:{{questionReferenceUuidParent[reference.uuid]}} ;
  {%- if referenceOrder[reference.uuid] -%}
  dsw:order "{{referenceOrder[reference.uuid]}}"^^xsd:integer ;
  {%- endif -%}
{%- endmacro -%}

{%- macro renderURLReference(reference, index) -%}
km:{{reference.uuid}} a dsw:URLReference ;
  {{ renderReference(reference)}}
  dsw:title {{reference.label|tojson}} ;
  dsw:referenceUrl "{{reference.url}}"^^schema:URL .
{%- endmacro -%}

{%- macro renderResourcePageReference(reference, index) -%}
km:{{reference.uuid}} a dsw:ResourcePageReference ;
  {{renderReference(reference)}}
  dsw:shortUuid "{{reference.resourcePageUuid}}" .
{%- endmacro -%}

{#- ------------------------------------------------------------------------------------ -#}
{#-  KM - INTEGRATION MACROS                                                             -#}
{#- ------------------------------------------------------------------------------------ -#}

{%- macro renderIntegration(integration, index) -%}
  dsw:integrationId "{{integration.id}}";
  dsw:title {{integration.name|tojson}} ;
  dsw:logo "{{integration.logo}}" ;
  dsw:itemUrl "{{integration.itemUrl}}"^^xsd:anyURI ;
  dsw:hasParent km:{{ctx.knowledgeModel.uuid}} ;
  dsw:order "{{index}}"^^xsd:integer ;
  {%- set props = renderList(integration.props, '"', '"') -%}
  {%- if props|length > 0 %}
  dsw:prop {{ props.split(',')|join(", ")}} ;
  {%- endif %}
  {%- if integration.annotations %}
  {{ renderAnnotation(integration.annotations) }} ;
  {%- endif %}
{%- endmacro -%}

{%- macro renderAPIIntegration(integration, index) -%}
km:{{integration.uuid}} a dsw:ApiIntegration ;
  dsw:uuid "{{integration.uuid}}" ;
  {{ renderIntegration(integration, index) }}
  dsw:rqUrl "{{integration.requestUrl}}" ;
  dsw:rqMethod "{{integration.requestMethod}}" ;
  {%- set headers = integration.requestHeaders -%}
  {%- if headers|length > 0 %}
  dsw:rqHeader
  {%- for header in headers %}
    [ a dsw:KeyValueEntry ;
      dsw:entryKey {{header.key|tojson}} ;
      dsw:entryValue {{header.value|tojson}} ]
      {%- if not loop.last -%} ,
      {%- else -%} ;
      {%- endif -%}
  {%- endfor -%}
  {%- endif %}
  dsw:rqBody "{{integration.requestBody}}" ;
  dsw:rqEmptySearch "{{integration.requestEmptySearch}}"^^xsd:boolean ;
  dsw:rsListField "{{integration.responseListField}}" ;
  dsw:rsItemId "{{integration.responseItemId}}" ;
  dsw:rsItemTemplate "{{integration.responseItemTemplate}}" .
{%- endmacro -%}

{%- macro renderWidgetIntegration(integration, index) -%}
km:{{integration.uuid}} a dsw:WidgetIntegration ;
  dsw:uuid "{{integration.uuid}}" ;
  {{ renderIntegration(integration, index) }}
  dsw:WidgetUrl "{{integration.widgetUrl}}" .
{%- endmacro -%}

{#- ------------------------------------------------------------------------------------ -#}
{#-  METRIC MACROS                                                                       -#}
{#- ------------------------------------------------------------------------------------ -#}

{%- macro renderMetric(metric, index) -%}
km:{{metric.uuid}} a dsw:Metric ;
  dsw:uuid "{{metric.uuid}}" ;
  dsw:title {{metric.title|tojson}} ;
  
  {%- if metric.description %}
  dsw:description {{metric.description|tojson}};
  {%- endif -%}
  
  {%- if  metric.abbreviation  %}
  dsw:abbreviation {{metric.abbreviation|tojson}} ;
  {%- endif %}
  {%- if metric.annotations %}
  {{ renderAnnotation(metric.annotations) }} ;
  {%- endif %}
  dsw:order "{{index}}"^^xsd:integer ;
  dsw:hasParent km:{{ctx.knowledgeModel.uuid}} .
{%- endmacro -%}

{%- macro renderMetricMeasure(metricMeasures)-%}
{%- if metricMeasures|length > 0 %}
  dsw:metricMeasure
  {%- for metricMeasure in metricMeasures %}
   [ a dsw:MetricMeasure ;
      dsw:measure "{{metricMeasure.measure}}"^^xsd:float ;
      dsw:weight "{{metricMeasure.weight}}"^^xsd:float ;
      dsw:hasMetric km:{{metricMeasure.metricUuid}} ]
      {%- if not loop.last -%} ,
      {%- else -%} ;
      {%- endif -%}
  {%- endfor -%}
{%- endif -%}
{%- endmacro -%}

{#- ------------------------------------------------------------------------------------ -#}
{#-  QUESTION MACROS                                                                     -#}
{#- ------------------------------------------------------------------------------------ -#}

{%- macro renderQuestion(question, index) -%}
  dsw:title {{question.title|tojson}} ;
  
  {%- if question.text %}
  dsw:description {{question.text|tojson}} ;
  {%- endif -%}
  
  {%- set experts = renderList(question.expertUuids, "km:", "") -%}
  {%- if experts|length > 0 %}
  dsw:containsExpert {{ experts.split(',')|join(", ")}} ;
    {%- for expert in question.expertUuids -%}
    {%- do questionExpertUuidParent.update({ expert : question.uuid}) -%}
    {%- do expertOrder.update({expert : loop.index}) -%}
    {%- endfor -%}
  {%- endif -%}
  
  {%- set references = renderList(question.referenceUuids, "km:", "") -%}
  {%- if references|length > 0 %}
  dsw:containsReference {{ references.split(',')|join(", ")}} ;
  {%- for reference in question.referenceUuids -%}
   {%- do questionReferenceUuidParent.update({ reference : question.uuid }) -%}
   {%- do referenceOrder.update({ reference : loop.index}) -%}
  {%- endfor -%}
  {%- endif -%}
  
  {%- set tags = renderList(question.tagUuids, "km:", "") -%}
  {%- if tags|length > 0 %}
  dsw:hasTag {{ tags.split(',')|join(", ")}} ;
  {%- endif -%}

  {%- if question.requiredPhaseUuid %}
  dsw:isDesiredAtPhase km:{{question.requiredPhaseUuid}} ;
  {%- endif %}
  dsw:order "{{index}}"^^xsd:integer ;
  {%- if question.annotations %}
  {{ renderAnnotation(question.annotations) }} ;
  {%- endif %}
{%- endmacro -%}

{%- macro renderReplyByLastUuid(question) -%}
  {%- set replies = []-%}
  {%- for reply in ctx.questionnaireReplies -%}
    {%- if reply.endswith('.'+question.uuid) -%}
    {%- do replies.append("reply:"+reply) -%}
    {%- endif -%}
  {%- endfor -%}
  {{replies|join(", ") }}
{%- endmacro -%}

{%- macro renderListOfItemsQuestion(question, parentUuid, index) -%}
km:{{question.uuid}} a dsw:ListOfItemsQuestion ;
  dsw:uuid "{{question.uuid}}" ;
  {{renderQuestion(question, index)}}
  dsw:hasParent km:{{parentUuid}} 
  {%- set followupQuestionsList = renderList(question.itemTemplateQuestionUuids, "km:", "") -%}
  {%- set replies = renderReplyByLastUuid(question) -%}

  {%- if replies|length > 0 %} ;
  dsw:hasReply {{ replies.split(',')|join(", ")}}
  {%- endif -%}

  {%- if followupQuestionsList|length > 0 %} ;
  dsw:containsItemTemplFollowupQuestion {{ followupQuestionsList.split(',')|join(", ")}} .
  {%- for followupQuestionUuid in question.itemTemplateQuestionUuids -%}
  {%- set followupQuestion = ctx.knowledgeModel.entities.questions[followupQuestionUuid] -%}  
  {{renderQuestionType(followupQuestion, question.uuid, loop.index)}}
  {%- endfor -%}
  {%- else -%} .
  {%- endif -%}
{%- endmacro -%}

{%- macro renderOptionsQuestion(question, parentUuid, index) -%}
km:{{question.uuid}} a dsw:OptionsQuestion ;
  dsw:uuid "{{question.uuid}}" ;
  {{renderQuestion(question, index)}}
  dsw:hasParent km:{{parentUuid}} 
  
  {%- set answers = renderList(question.answerUuids, "km:", "") -%}
  {%- set replies = renderReplyByLastUuid(question) -%}

  {%- if replies|length > 0 %} ;
  dsw:hasReply {{ replies.split(',')|join(", ")}}
  {%- endif -%}

  {%- if answers|length > 0 %} ;
  dsw:containsAnswer {{ answers.split(',')|join(", ")}} .
  {%- for answerUuid in question.answerUuids  -%}
  {%- do optionsQuestionAnswerUuidParent.update({ answerUuid : question.uuid}) -%}
  {%- do answerOrder.update({ answerUuid : loop.index}) -%}
  
  {%- for followupQuestionUuid in ctx.knowledgeModel.entities.answers[answerUuid].followUpUuids -%}
  {%- set followupQuestion = ctx.knowledgeModel.entities.questions[followupQuestionUuid] -%}
  {{renderQuestionType(followupQuestion, answerUuid,  loop.index)}}
  {%- endfor -%}
  {%- endfor -%}
  {%- else %} .
  {%- endif -%}
{%- endmacro -%} 

{%- macro renderValueQuestion(question, parentUuid, index) -%}
km:{{question.uuid}} a dsw:ValueQuestion ;
  dsw:uuid "{{question.uuid}}" ;
  {{renderQuestion(question, index)}}
  dsw:valueType "{{question.valueType}}" ;
  {%- set replies = renderReplyByLastUuid(question) -%}
  
  {%- if replies|length > 0 %} 
  dsw:hasReply {{ replies.split(',')|join(", ")}} ;
  {%- endif %}
  dsw:hasParent km:{{parentUuid}} .
{%- endmacro -%}

{%- macro renderIntegrationQuestion(question, parentUuid, index) -%}
km:{{question.uuid}} a dsw:IntegrationQuestion ;
  dsw:uuid "{{question.uuid}}" ;
  {{renderQuestion(question, index)}}
  {%- if question.integrationUuid != "00000000-0000-0000-0000-000000000000" %} {# this property is mandatory, but KM allows to leave it empty - then it has this value #}
  dsw:hasIntegration km:{{question.integrationUuid}} ;
  {%- endif -%}
  {%- set props = question.props -%}
  {%- if props|length > 0 %}
  dsw:prop
  {%- for key, value in props.items() %}
    [ a dsw:KeyValueEntry ;
      dsw:entryKey {{key|tojson}} ;
      dsw:entryValue {{value|tojson}}]
      {%- if not loop.last -%} ,
      {%- else -%} ;
      {%- endif -%}
  {%- endfor -%}
  {%- endif -%}
  {%- set replies = renderReplyByLastUuid(question) -%}
  
  {%- if replies|length > 0 %} 
  dsw:hasReply {{ replies.split(',')|join(", ")}} ;
  {%- endif %}
  dsw:hasParent km:{{parentUuid}} .
{%- endmacro -%}

{%- macro renderMultiChoiceQuestion(question, parentUuid, index) -%}
km:{{question.uuid}} a dsw:MultiChoiceQuestion ;
  dsw:uuid "{{question.uuid}}" ;
  {{renderQuestion(question, index)}}
  
{%- set choices = renderList(question.choiceUuids, "km:", "") -%}
  {%- if choices|length > 0 %}
  dsw:containsChoice {{ choices.split(',')|join(", ")}} ;
  {%- endif -%}

  {%- set replies = renderReplyByLastUuid(question) -%}
  
  {%- if replies|length > 0 -%} ;
  dsw:hasReply {{ replies.split(',')|join(", ")}} ;
  {%- endif %}
  dsw:hasParent km:{{parentUuid}} .
  {%- for choiceUuid in question.choiceUuids  -%}
  {% do multiChoiceQuestionChoiceUuidParent.update({ choiceUuid : question.uuid}) -%}
  {%- do choiceOrder.update({ choiceUuid : loop.index}) -%}
  {%- endfor -%}
{%- endmacro -%}

{%- macro renderQuestionType (question, parentUuid, index) -%}
    {%- if question.questionType == "ListQuestion" %}
    
{{ renderListOfItemsQuestion(question, parentUuid, index) }}
    {%- elif question.questionType == "OptionsQuestion" %}
    
{{ renderOptionsQuestion(question, parentUuid, index) }}
    {%- elif question.questionType == "ValueQuestion" %}
    
{{ renderValueQuestion(question,parentUuid, index) }} 
    {%- elif question.questionType == "IntegrationQuestion" %}
    
{{ renderIntegrationQuestion(question, parentUuid, index) }} 
    {%- elif question.questionType == "MultiChoiceQuestion" %}
    
{{ renderMultiChoiceQuestion(question, parentUuid, index) }} 
    {%- endif %}
{%- endmacro %}

{#- ------------------------------------------------------------------------------------ -#}
{#-  ANSWER, CHOICE MACROS                                                               -#}
{#- ------------------------------------------------------------------------------------ -#}

{%- macro renderChoice(choice, index) -%}
km:{{choice.uuid}} a dsw:Choice ;
  dsw:uuid "{{choice.uuid}}" ;
  dsw:title {{choice.label|tojson}} ;
  {%- if choice.annotations %}
  {{ renderAnnotation(choice.annotations) }} ;
  {%- endif %}
  {%- if choiceOrder[choice.uuid] -%}
  dsw:order "{{choiceOrder[choice.uuid]}}"^^xsd:integer ;
  {%- endif -%}
  dsw:hasParent km:{{multiChoiceQuestionChoiceUuidParent[choice.uuid]}} .
{%- endmacro -%}

{%- macro renderAnswer(answer, index) -%}
km:{{answer.uuid}} a dsw:Answer ;
  dsw:uuid "{{answer.uuid}}" ;
  dsw:title {{answer.label|tojson}} ;
  
  {%- if answer.advice %}
  dsw:advice {{answer.advice|tojson}} ;
  {%- endif -%}
  {{ renderMetricMeasure(answer.metricMeasures)}}

  {%- set followupQuestions = renderList(answer.followUpUuids, "km:", "") -%}
  {%- if followupQuestions|length > 0 %}
  dsw:containsFollowupQuestion {{ followupQuestions.split(',')|join(", ")}} ;
  {%- endif -%}
  {%- if answer.annotations %}
  {{ renderAnnotation(answer.annotations) }} ;
  {%- endif %}
  {%- if answerOrder[answer.uuid] %}
  dsw:order "{{answerOrder[answer.uuid]}}"^^xsd:integer ;
  {%- endif %}
  dsw:hasParent km:{{optionsQuestionAnswerUuidParent[answer.uuid]}} .
{%- endmacro -%}

{#- ------------------------------------------------------------------------------------ -#}
{#-  KNOWLEDGE MODEL                                                                     -#}
{#- ------------------------------------------------------------------------------------ #}

km:{{ ctx.knowledgeModel.uuid }} a dsw:KnowledgeModel ;
  dsw:uuid "{{ctx.knowledgeModel.uuid}}" ;
  dsw:knowledgeModelId "{{ctx.package.kmId}}" ;
  dsw:title {{ctx.package.name|tojson}} ;
  dsw:description {{ctx.package.description|tojson}} ;
  dsw:version "{{ctx.package.version}}" ;
  dsw:createdAt "{{ctx.package.createdAt}}"^^xsd:dateTime ;
  {%- set chapters = renderList(ctx.knowledgeModel.chapterUuids, "km:", "") -%}
  {%- if chapters|length > 0 %}
  dsw:containsChapter {{ chapters.split(',')|join(", ")}}
  {%- endif %}

  {%- set integrations = renderList(ctx.knowledgeModel.integrationUuids, "km:", "") -%}
  {%- if integrations|length > 0 %} ;
  dsw:containsIntegration {{ integrations.split(',')|join(", ")}} 
  {%- endif %}
  
  {%- set metrics = renderList(ctx.knowledgeModel.metricUuids, "km:", "") -%}
  {%- if metrics|length > 0 %} ;
  dsw:containsMetric {{ metrics.split(',')|join(", ")}}
  {%- endif %}

  {%- set phases = renderList(ctx.knowledgeModel.phaseUuids, "km:", "") -%}
  {%- if phases|length > 0 %} ;
  dsw:containsPhase {{ phases.split(',')|join(", ")}}
  {%- endif %}

  {%- if ctx.knowledgeModel.annotations %} ;
  {{ renderAnnotation(ctx.knowledgeModel.annotations) }}
  {%- endif -%}

  {%- set tags = renderList(ctx.knowledgeModel.tagUuids, "km:", "") -%}
  {%- if tags|length > 0 %} ;
  dsw:containsTag {{ tags.split(',')|join(", ")}}
  {%- endif -%} .
  
{#- ------------------------------------------------------------------------------------ -#}
{#-  CHAPTER                                                                             -#}
{#- ------------------------------------------------------------------------------------ -#}

{%- for chapterUuid in ctx.knowledgeModel.chapterUuids -%}
  {%- set chapter = ctx.knowledgeModel.entities.chapters[chapterUuid] %}

{{ renderChapter(chapter, loop.index) }}
{%- endfor -%}

{#- ------------------------------------------------------------------------------------ -#}
{#-  METRIC                                                                              -#}
{#- ------------------------------------------------------------------------------------ -#}

{%- for metricUuid in ctx.knowledgeModel.metricUuids -%}
  {%- set metric = ctx.knowledgeModel.entities.metrics[metricUuid] %}

{{ renderMetric(metric, loop.index) }}
{%- endfor -%}

{#- ------------------------------------------------------------------------------------ -#}
{#-  PHASE                                                                               -#}
{#- ------------------------------------------------------------------------------------ -#}

{%- for phaseUuid in ctx.knowledgeModel.phaseUuids -%}
  {%- set phase = ctx.knowledgeModel.entities.phases[phaseUuid] %}

{{ renderPhase(phase, loop.index) }}
{%- endfor -%}

{#- ------------------------------------------------------------------------------------ -#}
{#-  TAG                                                                                 -#}
{#- ------------------------------------------------------------------------------------ -#}

{%- for tagUuid in ctx.knowledgeModel.tagUuids -%}
  {%- set tag = ctx.knowledgeModel.entities.tags[tagUuid] %}

{{ renderTag(tag, loop.index) }}
{%- endfor -%}

{#- ------------------------------------------------------------------------------------ -#}
{#-  QUESTION                                                                            -#}
{#- ------------------------------------------------------------------------------------ -#}

{%- set optionsQuestionAnswerUuidParent = {} -%} {# Dictionary where the key is the uuid of an answer and vaule is the uuid of a question, which is its parent #}
{%- set multiChoiceQuestionChoiceUuidParent = {} -%} {# Dictionary where the key is the uuid of a choice and vaule is the uuid of a question, which is its parent #}
{%- set questionExpertUuidParent = {} -%} {# Dictionary where the key is the uuid of an expert and vaule is the uuid of a question, which is its parent #}
{%- set questionReferenceUuidParent = {} -%} {# Dictionary where the key is the uuid of a reference and vaule is the uuid of a question, which is its parent #}

{%- set expertOrder = {} -%}
{%- set answerOrder = {} -%}
{%- set choiceOrder = {} -%}
{%- set referenceOrder = {} -%}

{%- for chapterUuid in ctx.knowledgeModel.entities.chapters -%}
  {%- set chapter = ctx.knowledgeModel.entities.chapters[chapterUuid] -%}
  {%- for questionUuid in chapter.questionUuids -%}
    {%- set question = ctx.knowledgeModel.entities.questions[questionUuid] -%}
    {{renderQuestionType(question, chapterUuid, loop.index)}}
  {%- endfor -%}
{%- endfor -%}

{#- ------------------------------------------------------------------------------------ -#}
{#-  EXPERT                                                                              -#}
{#- ------------------------------------------------------------------------------------ -#}

{%- for expertUuid in ctx.knowledgeModel.entities.experts -%}
  {%- set expert = ctx.knowledgeModel.entities.experts[expertUuid] %}

{{ renderExpert(expert, loop.index) }}
{%- endfor -%}

{#- ------------------------------------------------------------------------------------ -#}
{#-  CHOICE                                                                              -#}
{#- ------------------------------------------------------------------------------------ -#}

{%- for choiceUuid in ctx.knowledgeModel.entities.choices -%}
  {%- set choice = ctx.knowledgeModel.entities.choices[choiceUuid] %}

{{ renderChoice(choice, loop.index) }}
{%- endfor -%}

{#- ------------------------------------------------------------------------------------ -#}
{#-  ANSWER                                                                              -#}
{#- ------------------------------------------------------------------------------------ -#}

{%- for answerUuid in ctx.knowledgeModel.entities.answers -%}
  {%- set answer = ctx.knowledgeModel.entities.answers[answerUuid] %}

{{ renderAnswer(answer, loop.index) }}
{%- endfor -%}

{#- ------------------------------------------------------------------------------------ -#}
{#-  REFERENCE                                                                           -#}
{#- ------------------------------------------------------------------------------------ -#}

{%- for referenceUuid in ctx.knowledgeModel.entities.references -%}
  {%- set reference = ctx.knowledgeModel.entities.references[referenceUuid] -%}
    {%- if reference.referenceType == "URLReference" %}
    
{{ renderURLReference(reference, loop.index) }}

    {%- elif reference.referenceType == "ResourcePageReference" %}
    
{{ renderResourcePageReference(reference, loop.index) }}

    {%- endif %}
{%- endfor -%}

{#- ------------------------------------------------------------------------------------ -#}
{#-  INTEGRATION                                                                            -#}
{#- ------------------------------------------------------------------------------------ -#}

{%- for integrationUuid in ctx.knowledgeModel.integrationUuids -%}
  {%- set integration = ctx.knowledgeModel.entities.integrations[integrationUuid] %}
  {%- if integration.integrationType == "ApiIntegration" %}
  
{{ renderAPIIntegration(integration, loop.index) }}

  {%- elif integration.integrationType == "WidgetIntegration" %}
  
{{ renderWidgetIntegration(integration, loop.index) }}
{%- endif -%}

{%- endfor -%}
