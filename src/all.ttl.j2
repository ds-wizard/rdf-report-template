{#- ------------------------------------------------------------------------------------ -#}
{#-  GENERAL MACROS                                                                      -#}
{#- ------------------------------------------------------------------------------------ -#}

{%- macro renderList(list, strBefore, strAfter) -%}
  {%- set resultList = [] -%}
    {%- for item in list -%}
    {%- do resultList.append(strBefore+item+strAfter) -%}
    {%- endfor -%}
    {{resultList|join(", ") }}
{%- endmacro -%}

{#- ------------------------------------------------------------------------------------ -#}
{#- KNOWLEDGE MODEL MACROS                                                               -#}
{#- ------------------------------------------------------------------------------------ -#}

{%- macro renderPhase(phase, index) -%}
km:{{phase.uuid}} a dsw:Phase ;
  dsw:uuid "{{phase.uuid}}" ;
  dsw:title {{phase.title|tojson}} ;
  
  {%- if phase.description %}
  dsw:description {{phase.description|tojson}} ;
  {%- endif %}
  {%- if phase.annotations %}
  {{ renderAnnotation(phase.annotations) }} ;
  {%- endif %}
  dsw:order "{{index}}"^^xsd:integer ;
  dsw:hasParent km:{{ctx.knowledgeModel.uuid}} .
{%- endmacro -%}

{%- macro renderTag(tag, index) -%}
km:{{tag.uuid}} a dsw:Tag ;
  dsw:uuid "{{tag.uuid}}" ;
  dsw:title {{tag.name|tojson}} ;
  
  {%- if tag.description %}
  dsw:description {{tag.description|tojson}} ;
  {%- endif %}
  dsw:color "{{tag.color}}" ;
  {%- if tag.annotations %}
  {{ renderAnnotation(tag.annotations) }} ;
  {%- endif %}
  dsw:order "{{index}}"^^xsd:integer ;
  dsw:hasParent km:{{ctx.knowledgeModel.uuid}} .
{%- endmacro -%}

{%- macro renderExpert(expert, index) -%}
km:{{expert.uuid}} a dsw:Expert ;
  dsw:uuid "{{expert.uuid}}" ;
  dsw:title {{expert.name|tojson}} ;
  dsw:email "{{expert.email}}" ;
  {%- if expert.annotations %}
  {{ renderAnnotation(expert.annotations) }} ;
  {%- endif %}
  dsw:order "{{expertOrder[expert.uuid]}}"^^xsd:integer ;
  dsw:hasParent km:{{questionExpertUuidParent[expert.uuid]}} .
{%- endmacro -%}

{%- macro renderAnnotation(annotations) -%}
{%- if annotations|length > 0 -%}
  dsw:annotation
  {%- for annotation in annotations %}
    [ a dsw:KeyValueEntry ;
      dsw:entryKey {{annotation.key|tojson}} ;
      dsw:entryValue {{annotation.value|tojson}} ]
      {%- if not loop.last -%} ,
      {%- endif -%}
{%- endfor -%}
{%- endif -%}
{%- endmacro -%}

{%- macro renderChapter(chapter, index) -%}
km:{{chapter.uuid}} a dsw:Chapter ;
  dsw:uuid "{{chapter.uuid}}" ;
  dsw:title {{chapter.title|tojson}} ;
  {%- if chapter.text %}
  dsw:description {{chapter.text|tojson}} ;
  {%- endif -%}

  {%- set questions = renderList(chapter.questionUuids, "km:", "") -%}
  {%- if questions|length > 0 %}
  dsw:containsQuestion {{ questions.split(',')|join(", ")}} ;
  {%- endif %}
  {%- if chapter.annotations %}
  {{ renderAnnotation(chapter.annotations) }} ;
  {%- endif %}
  dsw:order "{{index}}"^^xsd:integer ;
  dsw:hasParent km:{{ctx.knowledgeModel.uuid}} .
{%- endmacro -%}

{#- ------------------------------------------------------------------------------------ -#}
{#-  KM - REFERENCE MACROS                                                               -#}
{#- ------------------------------------------------------------------------------------ -#}

{%- macro renderReference(reference) -%}
  dsw:uuid "{{reference.uuid}}" ;
  {%- if reference.annotations -%}
  {{ renderAnnotation(reference.annotations) }} ;
  {%- endif %}
  dsw:hasParent km:{{questionReferenceUuidParent[reference.uuid]}} ;
  dsw:order "{{referenceOrder[reference.uuid]}}"^^xsd:integer ;
{%- endmacro -%}

{%- macro renderURLReference(reference, index) -%}
km:{{reference.uuid}} a dsw:URLReference ;
  {{ renderReference(reference)}}
  dsw:title {{reference.label|tojson}} ;
  dsw:referenceUrl "{{reference.url}}"^^schema:URL .
{%- endmacro -%}

{%- macro renderResourcePageReference(reference, index) -%}
km:{{reference.uuid}} a dsw:ResourcePageReference ;
  {{renderReference(reference)}}
  dsw:shortUuid "{{reference.shortUuid}}" .
{%- endmacro -%}

{#- ------------------------------------------------------------------------------------ -#}
{#-  KM - INTEGRATION MACROS                                                             -#}
{#- ------------------------------------------------------------------------------------ -#}

{%- macro renderIntegration(integration, index) -%}
  dsw:integrationId "{{integration.id}}";
  dsw:title {{integration.name|tojson}} ;
  dsw:logo "{{integration.logo}}" ;
  dsw:itemUrl "{{integration.itemUrl}}"^^xsd:anyURI ;
  dsw:hasParent km:{{ctx.knowledgeModel.uuid}} ;
  dsw:order "{{index}}"^^xsd:integer ;
  {%- set props = renderList(integration.props, '"', '"') -%}
  {%- if props|length > 0 %}
  dsw:prop {{ props.split(',')|join(", ")}} ;
  {%- endif %}
  {%- if integration.annotations %}
  {{ renderAnnotation(integration.annotations) }} ;
  {%- endif %}
{%- endmacro -%}

{%- macro renderAPIIntegration(integration, index) -%}
km:{{integration.uuid}} a dsw:ApiIntegration ;
  dsw:uuid "{{integration.uuid}}" ;
  {{ renderIntegration(integration, index) }}
  dsw:rqUrl "{{integration.requestUrl}}" ;
  dsw:rqMethod "{{integration.requestMethod}}" ;
  {%- set headers = integration.requestHeaders -%}
  {%- if headers|length > 0 %}
  dsw:rqHeader
  {%- for header in headers %}
    [ a dsw:KeyValueEntry ;
      dsw:entryKey {{header.key|tojson}} ;
      dsw:entryValue {{header.value|tojson}} ]
      {%- if not loop.last -%} ,
      {%- else -%} ;
      {%- endif -%}
  {%- endfor -%}
  {%- endif %}
  dsw:rqBody "{{integration.requestBody}}" ;
  dsw:rqEmptySearch "{{integration.requestEmptySearch}}"^^xsd:boolean ;
  dsw:rsListField "{{integration.responseLisField}}" ;
  dsw:rsItemId "{{integration.responseItemId}}" ;
  dsw:rsListField "{{integration.responseLisField}}" ;
  dsw:rsItemId "{{integration.responseItemId}}" ;
  dsw:rsItemTemplate "{{integration.responseItemTemplate}}" .
{%- endmacro -%}

{%- macro renderWidgetIntegration(integration, index) -%}
km:{{integration.uuid}} a dsw:WidgetIntegration ;
  dsw:uuid "{{integration.uuid}}" ;
  {{ renderIntegration(integration, index) }}
  dsw:WidgetUrl "{{integration.widgetUrl}}" .
{%- endmacro -%}

{#- ------------------------------------------------------------------------------------ -#}
{#-  METRIC MACROS                                                                       -#}
{#- ------------------------------------------------------------------------------------ -#}

{%- macro renderMetric(metric, index) -%}
km:{{metric.uuid}} a dsw:Metric ;
  dsw:uuid "{{metric.uuid}}" ;
  dsw:title {{metric.title|tojson}} ;
  
  {%- if metric.description %}
  dsw:description {{metric.description|tojson}};
  {%- endif -%}
  
  {%- if  metric.abbreviation  %}
  dsw:abbreviation {{metric.abbreviation|tojson}} ;
  {%- endif %}
  {%- if metric.annotations %}
  {{ renderAnnotation(metric.annotations) }} ;
  {%- endif %}
  dsw:order "{{index}}"^^xsd:integer ;
  dsw:hasParent km:{{ctx.knowledgeModel.uuid}} .
{%- endmacro -%}

{%- macro renderMetricMeasure(metricMeasures)-%}
{%- if metricMeasures|length > 0 %}
  dsw:metricMeasure
  {%- for metricMeasure in metricMeasures %}
   [ a dsw:MetricMeasure ;
      dsw:measure "{{metricMeasure.measure}}"^^xsd:float ;
      dsw:weight "{{metricMeasure.weight}}"^^xsd:float ;
      dsw:hasMetric km:{{metricMeasure.metricUuid}} ]
      {%- if not loop.last -%} ,
      {%- else -%} ;
      {%- endif -%}
  {%- endfor -%}
{%- endif -%}
{%- endmacro -%}

{#- ------------------------------------------------------------------------------------ -#}
{#-  QUESTION MACROS                                                                     -#}
{#- ------------------------------------------------------------------------------------ -#}

{%- macro renderQuestion(question, index) -%}
  dsw:title {{question.title|tojson}} ;
  
  {%- if question.text %}
  dsw:description {{question.text|tojson}} ;
  {%- endif -%}
  
  {%- set experts = renderList(question.expertUuids, "km:", "") -%}
  {%- if experts|length > 0 %}
  dsw:containsExpert {{ experts.split(',')|join(", ")}} ;
    {%- for expert in question.expertUuids -%}
    {%- do questionExpertUuidParent.update({ expert : question.uuid}) -%}
    {%- do expertOrder.update({expert : loop.index}) -%}
    {%- endfor -%}
  {%- endif -%}
  
  {%- set references = renderList(question.referenceUuids, "km:", "") -%}
  {%- if references|length > 0 %}
  dsw:containsReference {{ references.split(',')|join(", ")}} ;
  {%- for reference in question.referenceUuids -%}
   {%- do questionReferenceUuidParent.update({ reference : question.uuid }) -%}
   {%- do referenceOrder.update({ reference : loop.index}) -%}
  {%- endfor -%}
  {%- endif -%}
  
  {%- set tags = renderList(question.tagUuids, "km:", "") -%}
  {%- if tags|length > 0 %}
  dsw:hasTag {{ tags.split(',')|join(", ")}} ;
  {%- endif -%}

  {%- if question.requiredPhaseUuid %}
  dsw:isDesiredAtPhase km:{{question.requiredPhaseUuid}} ;
  {%- endif %}
  dsw:order "{{index}}"^^xsd:integer ;
  {%- if question.annotations %}
  {{ renderAnnotation(question.annotations) }} ;
  {%- endif %}
{%- endmacro -%}

{%- macro renderReplyByLastUuid(question) -%}
  {%- set replies = []-%}
  {%- for reply in ctx.questionnaireReplies -%}
    {%- if reply.endswith('.'+question.uuid) -%}
    {%- do replies.append("reply:"+reply) -%}
    {%- endif -%}
  {%- endfor -%}
  {{replies|join(", ") }}
{%- endmacro -%}

{%- macro renderListOfItemsQuestion(question, parentUuid, index) -%}
km:{{question.uuid}} a dsw:ListOfItemsQuestion ;
  dsw:uuid "{{question.uuid}}" ;
  {{renderQuestion(question, index)}}
  dsw:hasParent km:{{parentUuid}} 
  {%- set followupQuestionsList = renderList(question.itemTemplateQuestionUuids, "km:", "") -%}
  {%- set replies = renderReplyByLastUuid(question) -%}

  {%- if replies|length > 0 %} ;
  dsw:hasReply {{ replies.split(',')|join(", ")}}
  {%- endif -%}

  {%- if followupQuestionsList|length > 0 %} ;
  dsw:containsItemTemplFollowupQuestion {{ followupQuestionsList.split(',')|join(", ")}} .
  {%- for followupQuestionUuid in question.itemTemplateQuestionUuids -%}
  {%- set followupQuestion = ctx.knowledgeModel.entities.questions[followupQuestionUuid] -%}  
  {{renderQuestionType(followupQuestion, question.uuid, loop.index)}}
  {%- endfor -%}
  {%- else -%} .
  {%- endif -%}
{%- endmacro -%}

{%- macro renderOptionsQuestion(question, parentUuid, index) -%}
km:{{question.uuid}} a dsw:OptionsQuestion ;
  dsw:uuid "{{question.uuid}}" ;
  {{renderQuestion(question, index)}}
  dsw:hasParent km:{{parentUuid}} 
  
  {%- set answers = renderList(question.answerUuids, "km:", "") -%}
  {%- set replies = renderReplyByLastUuid(question) -%}

  {%- if replies|length > 0 %} ;
  dsw:hasReply {{ replies.split(',')|join(", ")}}
  {%- endif -%}

  {%- if answers|length > 0 %} ;
  dsw:containsAnswer {{ answers.split(',')|join(", ")}} .
  {%- for answerUuid in question.answerUuids  -%}
  {%- do optionsQuestionAnswerUuidParent.update({ answerUuid : question.uuid}) -%}
  {%- do answerOrder.update({ answerUuid : loop.index}) -%}
  
  {%- for followupQuestionUuid in ctx.knowledgeModel.entities.answers[answerUuid].followUpUuids -%}
  {%- set followupQuestion = ctx.knowledgeModel.entities.questions[followupQuestionUuid] -%}
  {{renderQuestionType(followupQuestion, answerUuid,  loop.index)}}
  {%- endfor -%}
  {%- endfor -%}
  {%- else %} .
  {%- endif -%}
{%- endmacro -%} 

{%- macro renderValueQuestion(question, parentUuid, index) -%}
km:{{question.uuid}} a dsw:ValueQuestion ;
  dsw:uuid "{{question.uuid}}" ;
  {{renderQuestion(question, index)}}
  dsw:valueType "{{question.valueType}}" ;
  {%- set replies = renderReplyByLastUuid(question) -%}
  
  {%- if replies|length > 0 %} 
  dsw:hasReply {{ replies.split(',')|join(", ")}} ;
  {%- endif %}
  dsw:hasParent km:{{parentUuid}} .
{%- endmacro -%}

{%- macro renderIntegrationQuestion(question, parentUuid, index) -%}
km:{{question.uuid}} a dsw:IntegrationQuestion ;
  dsw:uuid "{{question.uuid}}" ;
  {{renderQuestion(question, index)}}
  {%- if question.integrationUuid != "00000000-0000-0000-0000-000000000000" %} {# this property is mandatory, but KM allows to leave it empty - then it has this value #}
  dsw:hasIntegration km:{{question.integrationUuid}} ;
  {%- endif -%}
  {%- set props = question.props -%}
  {%- if props|length > 0 %}
  dsw:prop
  {%- for key, value in props.items() %}
    [ a dsw:KeyValueEntry ;
      dsw:entryKey {{key|tojson}} ;
      dsw:entryValue {{value|tojson}}]
      {%- if not loop.last -%} ,
      {%- else -%} ;
      {%- endif -%}
  {%- endfor -%}
  {%- endif -%}
  {%- set replies = renderReplyByLastUuid(question) -%}
  
  {%- if replies|length > 0 %} 
  dsw:hasReply {{ replies.split(',')|join(", ")}} ;
  {%- endif %}
  dsw:hasParent km:{{parentUuid}} .
{%- endmacro -%}

{%- macro renderMultiChoiceQuestion(question, parentUuid, index) -%}
km:{{question.uuid}} a dsw:MultiChoiceQuestion ;
  dsw:uuid "{{question.uuid}}" ;
  {{renderQuestion(question, index)}}
  
{%- set choices = renderList(question.choiceUuids, "km:", "") -%}
  {%- if choices|length > 0 %}
  dsw:containsChoice {{ choices.split(',')|join(", ")}} ;
  {%- endif -%}

  {%- set replies = renderReplyByLastUuid(question) -%}
  
  {%- if replies|length > 0 -%} ;
  dsw:hasReply {{ replies.split(',')|join(", ")}} ;
  {%- endif %}
  dsw:hasParent km:{{parentUuid}} .
  {%- for choiceUuid in question.choiceUuids  -%}
  {% do multiChoiceQuestionChoiceUuidParent.update({ choiceUuid : question.uuid}) -%}
  {%- do choiceOrder.update({ choiceUuid : loop.index}) -%}
  {%- endfor -%}
{%- endmacro -%}

{%- macro renderQuestionType (question, parentUuid, index) -%}
    {%- if question.questionType == "ListQuestion" %}
    
{{ renderListOfItemsQuestion(question, parentUuid, index) }}
    {%- elif question.questionType == "OptionsQuestion" %}
    
{{ renderOptionsQuestion(question, parentUuid, index) }}
    {%- elif question.questionType == "ValueQuestion" %}
    
{{ renderValueQuestion(question,parentUuid, index) }} 
    {%- elif question.questionType == "IntegrationQuestion" %}
    
{{ renderIntegrationQuestion(question, parentUuid, index) }} 
    {%- elif question.questionType == "MultiChoiceQuestion" %}
    
{{ renderMultiChoiceQuestion(question, parentUuid, index) }} 
    {%- endif %}
{%- endmacro %}

{#- ------------------------------------------------------------------------------------ -#}
{#-  ANSWER/REPLY MACROS                                                                 -#}
{#- ------------------------------------------------------------------------------------ -#}

{%- macro renderChoice(choice, index) -%}
km:{{choice.uuid}} a dsw:Choice ;
  dsw:uuid "{{choice.uuid}}" ;
  dsw:title {{choice.label|tojson}} ;
  {%- if choice.annotations %}
  {{ renderAnnotation(choice.annotations) }} ;
  {%- endif %}
  dsw:hasParent km:{{multiChoiceQuestionChoiceUuidParent[choice.uuid]}} ;
  dsw:order "{{choiceOrder[choice.uuid]}}"^^xsd:integer .
{%- endmacro -%}

{%- macro renderAnswer(answer, index) -%}
km:{{answer.uuid}} a dsw:Answer ;
  dsw:uuid "{{answer.uuid}}" ;
  dsw:title {{answer.label|tojson}} ;
  
  {%- if answer.advice %}
  dsw:advice {{answer.advice|tojson}} ;
  {%- endif -%}
  {{ renderMetricMeasure(answer.metricMeasures)}}

  {%- set followupQuestions = renderList(answer.followUpUuids, "km:", "") -%}
  {%- if followupQuestions|length > 0 %}
  dsw:containsFollowupQuestion {{ followupQuestions.split(',')|join(", ")}} ;
  {%- endif -%}
  {%- if answer.annotations %}
  {{ renderAnnotation(answer.annotations) }} ;
  {%- endif %}
  dsw:hasParent km:{{optionsQuestionAnswerUuidParent[answer.uuid]}} ;
  dsw:order "{{answerOrder[answer.uuid]}}"^^xsd:integer .
{%- endmacro -%}

{%- macro renderReply(replyPath, reply) -%}
  dsw:createdAt "{{reply.createdAt}}"^^xsd:dateTime ;
  dsw:isCreatedBy user:{{reply.createdBy.uuid}} ;
 {%- set listOfUuids = replyPath.split('.') %}
  dsw:isReplyTo km:{{listOfUuids|last}} ;
{%- endmacro -%}

{%- macro renderStringReply(replyPath, reply, index) -%}
reply:{{replyPath}} a dsw:ValueReply ;
  dsw:path "{{replyPath}}" ;
  {{ renderReply(replyPath, reply) }}
  {%- do simpleAuthors.update({ reply.createdBy.uuid : reply.createdBy}) -%}
  {%- set listOfUuids = replyPath.split('.') %}
  {%- set questionUuid = listOfUuids|last -%}
  {%- set type = ctx.knowledgeModel.entities.questions[questionUuid].valueType -%} 

  {%- if type == "UrlQuestionValueType" %}
  dsw:urlReplyValue <{{reply.value.value}}> ;

  {%- elif type == "StringQuestionValueType" or type == "TextQuestionValueType" or type == "EmailQuestionValueType" or type == "ColorQuestionValueType"%}
  dsw:replyValue {{reply.value.value|tojson}} 

  {%- elif type == "NumberQuestionValueType" %}
  dsw:numberReplyValue  "{{reply.value.value}}"^^xsd:float ;

  {%- elif type == "DateQuestionValueType" %}
  dsw:dateReplyValue  "{{reply.value.value}}"^^xsd:date ;

  {%- elif type == "DateTimeQuestionValueType" %}
  dsw:dateTimeReplyValue  "{{reply.value.value}}"^^xsd:dateTime ;

  {%- elif type == "TimeQuestionValueType" %}
  dsw:timeReplyValue  "{{reply.value.value}}"^^xsd:time ;
  {%- endif %} .
{%- endmacro -%}

{%- macro renderItemListReply(replyPath, reply, index) -%}
reply:{{replyPath}} a dsw:ItemListReply ;
  dsw:path "{{replyPath}}" ;
  {{ renderReply(replyPath, reply) }}

  {%- set replies = renderList(reply.value.value, '"', '"') -%}
  {%- if replies|length > 0 %}
  dsw:replyValue {{ replies.split(',')|join(", ")}} .
  
  {%- do simpleAuthors.update({ reply.createdBy.uuid: reply.createdBy}) -%}
  {%- endif -%}

{%- endmacro -%}

{%- macro renderIntegrationReply(replyPath, reply, index) -%}
{%- if reply.value.value.type == "IntegrationType" -%}
    {%- set listOfUuids = replyPath.split('.') -%}
    {%- set questionId = listOfUuids|last -%}
    {%- set integrationId = ctx.knowledgeModel.entities.questions[questionId].integrationUuid -%}
    {%- set integration = ctx.knowledgeModel.entities.integrations[integrationId] -%}
reply:{{replyPath}} a dsw:IntegrationTypeIntegrationReply ;
  dsw:path "{{replyPath}}" ;
  dsw:integrationReplyValue "{{integration.itemUrl | replace("${id}", reply.value.value.id )}}"^^schema:URL ;
  dsw:integrationReplyItem "{{reply.value.value.id}}" ;
{%- endif -%}

{%- if reply.value.value.type == "PlainType" -%}
reply:{{replyPath}} a dsw:PlainTypeIntegrationReply ;
  dsw:path "{{replyPath}}" ;
{%- endif %}
  {{ renderReply(replyPath, reply) }}
  dsw:replyValue {{reply.value.value.value|tojson}} .
  {%- do simpleAuthors.update({ reply.createdBy.uuid: reply.createdBy}) -%}
{%- endmacro -%}

{%- macro renderMultiChoiceReply(replyPath, reply, index) -%}
reply:{{replyPath}} a dsw:MultiChoiceReply ;
  dsw:path "{{replyPath}}" ;
  {{ renderReply(replyPath, reply) }}
  
  {%- set choicesUuidPrefix = renderList(reply.value.value, "km:", "") -%}
  {%- set choicesUuid = renderList(reply.value.value, '"', '"') -%}
  {%- if choicesUuidPrefix|length > 0 %}
  dsw:multiChoiceReplyValue {{ choicesUuidPrefix.split(',')|join(", ")}} ;
  dsw:replyValue {{choicesUuid.split(',')|join(", ")}} .

  {%- endif-%}
  {%- do simpleAuthors.update({ reply.createdBy.uuid: reply.createdBy}) -%}
{%- endmacro -%}

{%- macro renderAnswerReply(replyPath, reply, index) -%}
reply:{{replyPath}} a dsw:AnswerReply ;
  {{ renderReply(replyPath, reply) }}
  {%- if reply.value.value -%}
  dsw:replyValue "{{reply.value.value}}" ;
  dsw:answerReplyValue km:{{reply.value.value}} ;
  {%- endif %}
  dsw:path "{{replyPath}}" .
  {%- do simpleAuthors.update({ reply.createdBy.uuid: reply.createdBy}) -%}
{%- endmacro -%}

{#- ------------------------------------------------------------------------------------ -#}
{#-  QUESTIONNAIRE VERSION MACRO                                                         -#}
{#- ------------------------------------------------------------------------------------ -#}

{%- macro renderQuestionnaireVersion(version, index) -%}
questionnaireVersion:{{version.uuid}} a dsw:QuestionnaireVersion ;
  dsw:uuid "{{version.uuid}}" ;
  dsw:eventUuid "{{version.eventUuid}}" ;
  dsw:title {{version.name|tojson}} ;
  {%- if version.description %}
  dsw:description {{version.description|tojson}} ;
  {%- endif %}
  {%- if version.createdBy.uuid %}
  dsw:isCreatedBy user:{{version.createdBy.uuid}} ;
  {%- endif %}
  dsw:createdAt "{{version.createdAt}}"^^xsd:dateTime ;
  dsw:updatedAt "{{version.updatedAt}}"^^xsd:dateTime .
{%- endmacro -%}

{#- ------------------------------------------------------------------------------------ -#}
{#- CHAPTER REPORT MACRO                                                                 -#}
{#- ------------------------------------------------------------------------------------ -#}

{%- macro renderChapterReport(chapterReport, index) -%}
report:chapterReport-{{chapterReport.chapterUuid}} a dsw:ChapterReportItem ;
  dsw:reportItemId "chapterReport-{{chapterReport.chapterUuid}}" ;
  dsw:isAboutChapter km:{{chapterReport.chapterUuid}} ;
  {%- if chapterReport.metrics %}
  dsw:hasResult
  {%- for metric in chapterReport.metrics %}
    [ a dsw:ReportMetric ;
      dsw:resultMeasure "{{metric.measure}}"^^xsd:float ;
      dsw:hasMetric km:{{metric.metric}} ]
      {%- if not loop.last -%} ,
      {%- elif chapterReport.indications -%} ;
      {%- else -%} .
      {%- endif -%}
  {%- endfor -%}
  {%- endif -%}

{%- if chapterReport.indications %}
  dsw:hasIndication
  {%- for indication in chapterReport.indications %}
    [ a dsw:ReportIndication ;
      dsw:indicationType "{{indication.indicationType}}" ;
      dsw:answered "{{indication.answeredQuestions}}"^^xsd:integer ;
      dsw:unanswered "{{indication.unansweredQuestions}}"^^xsd:integer ]
      {%- if not loop.last -%} ,
      {%- else -%} .
      {%- endif -%}
  {%- endfor -%}
{%- endif -%}
{%- endmacro -%}


@prefix dsw: <http://ds-wizard.org/ontology#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema> .
@prefix schema: <https://schema.org/> .
@prefix km: <{{ ctx.config.clientUrl }}/knowledge-models/{{ ctx.package.id }}/> .
@prefix user: <{{ ctx.config.clientUrl }}/users/> .
@prefix organization: <{{ ctx.config.clientUrl }}/organizations/> . 
@prefix report: <{{ ctx.config.clientUrl }}/projects/{{ctx.questionnaireUuid}}/metrics/> .
@prefix package: <{{ ctx.config.clientUrl }}/knowledge-models/> .
@prefix document: <{{ ctx.config.clientUrl }}/documents/> .
@prefix questionnaire: <{{ ctx.config.clientUrl }}/projects/> .
@prefix questionnaireVersion: <{{ ctx.config.clientUrl }}/projects/{{ctx.questionnaireUuid}}/versions/> .
@prefix reply: <{{ctx.config.clientUrl}}/projects/{{ctx.questionnaireUuid}}?questionPath=> .
@prefix ctxConfig: <{{ ctx.config.clientUrl }}/contextConfig> .

{#- ------------------------------------------------------------------------------------ -#}
{#-  DOCUMENT                                                                            -#}
{#- ------------------------------------------------------------------------------------  #}

document:{{ctx.uuid}} a dsw:Document ;
  dsw:uuid "{{ctx.uuid}}" ;
  dsw:createdAt "{{ctx.createdAt}}"^^xsd:dateTime ;
  dsw:updatedAt "{{ctx.updatedAt}}"^^xsd:dateTime ;
  dsw:hasKnowledgeModel km:{{ctx.knowledgeModel.uuid}} ;
  dsw:hasOrganization organization:{{ctx.organization.organizationId}} ;
  dsw:hasContextConfig ctxConfig:contextConfig ;
  dsw:hasQuestionnaire questionnaire:{{ctx.questionnaireUuid}} ;
  dsw:hasReport report:{{ctx.report.uuid}} .

{#- ------------------------------------------------------------------------------------ -#}
{#-  ORGANIZATION                                                                        -#}
{#- ------------------------------------------------------------------------------------ #}

organization:{{ctx.organization.organizationId}} a dsw:Organization ;
  dsw:organizationId "{{ctx.organization.organizationId}}" ;
  dsw:title {{ctx.organization.name|tojson}} ;
  dsw:description {{ctx.organization.description|tojson}} 
  {%- set affiliations = renderList(ctx.organization.affiliations, '"', '"') -%}
  {%- if affiliations|length > 0 %} ;
  dsw:affiliation {{ affiliations.split(',')|join(", ")}}
  {%- endif -%} .
  
{#- ------------------------------------------------------------------------------------ -#}
{#-  CONTEXT CONFIG                                                                      -#}
{#- ------------------------------------------------------------------------------------ #}

ctxConfig:contextConfig a dsw:ContextConfig ;
  dsw:clientUrl "{{ctx.config.clientUrl}}"^^schema:URL ;
  dsw:documentTemplateMetamodelVersion "{{ctx.documentTemplateMetamodelVersion}}"^^xsd:integer .

{#- ------------------------------------------------------------------------------------ -#}
{#-  QUESTIONNAIRE                                                                       -#}
{#- ------------------------------------------------------------------------------------ #}

questionnaire:{{ctx.questionnaireUuid}} a dsw:Questionnaire ;
  dsw:uuid "{{ctx.questionnaireUuid}}" ;
  dsw:title {{ctx.questionnaireName|tojson}} ;
  {%- if ctx.questionnaireDescription -%}
  dsw:description {{ctx.questionnaireDescription|tojson}} ;
  {%- endif -%}
  {%- set projectTags = renderList(ctx.questionnaireProjectTags, '"','"') -%}
  {%- if projectTags|length > 0 %}
  dsw:hasProjectTag {{ projectTags.split(',')|join(", ")}} ;
  {%- endif %}
  dsw:hasCurrentVersion questionnaireVersion:{{ctx.questionnaireVersion}} ;

  {%- if ctx.questionnaireVersions|length > 0 -%}
  {%- set versions = [] -%}
  {%- for version in ctx.questionnaireVersions -%}
  {%- do versions.append("questionnaireVersion:"+version.uuid) -%}
  {%- endfor %}
  dsw:hasVersion {{versions|join(", ")}} ;
  {%- endif %}
  dsw:hasPhase km:{{ctx.phaseUuid}} ;
  dsw:hasDocument document:{{ctx.uuid}} ;
  dsw:usesKnowledgeModel km:{{ ctx.knowledgeModel.uuid }} ;
  dsw:isCreatedBy user:{{ctx.createdBy.uuid}} . 

{#- ------------------------------------------------------------------------------------ -#}
{#-  QUESTIONNAIRE VERSION                                                               -#}
{#- ------------------------------------------------------------------------------------ #}

{%- if ctx.questionnaireVersions|length > 0 %}
  {%- for version in ctx.questionnaireVersions %}
  
{{ renderQuestionnaireVersion(version, loop.index) }}
  {%- endfor -%}
  {%- endif -%}

{#- ------------------------------------------------------------------------------------ -#}
{#-  REPORT                                                                              -#}
{#- ------------------------------------------------------------------------------------ #}

report:{{ctx.report.uuid}} a dsw:Report ;
  dsw:uuid "{{ctx.report.uuid}}" ;
  dsw:hasTotalReport report:totalReport ;

  {%- if ctx.report.chapterReports|length > 0 -%}
  {%- set chapterReports = [] -%}
  {%- for chapterReport in ctx.report.chapterReports -%}
  {%- do chapterReports.append("report:chapterReport-"+chapterReport.chapterUuid) -%}
  {%- endfor %}
  dsw:hasChapterReport {{chapterReports|join(", ")}} ;
  {%- endif %}
  dsw:createdAt "{{ctx.report.createdAt}}"^^xsd:dateTime ;
  dsw:updatedAt "{{ctx.report.updatedAt}}"^^xsd:dateTime .

{#- ------------------------------------------------------------------------------------ -#}
{#-  TOTAL REPORT                                                                        -#}
{#- ------------------------------------------------------------------------------------ #}

report:totalReport a dsw:TotalReportItem ;
  dsw:reportItemId "totalReport" ;
{%- if ctx.report.totalReport.metrics  %}
  dsw:hasResult
  {%- for metric in ctx.report.totalReport.metrics %}
    [ a dsw:ReportMetric ;
      dsw:resultMeasure "{{metric.measure}}"^^xsd:float ;
      dsw:hasMetric km:{{metric.metric}} ] 
      {%- if not loop.last -%} ,
      {%- elif ctx.report.totalReport.indications -%} ;
      {%- else -%} .
      {%- endif -%}
  {% endfor -%}
{%- endif -%}

{%- if ctx.report.totalReport.indications %}
  dsw:hasIndication
  {%- for indication in ctx.report.totalReport.indications %}
    [ a dsw:ReportIndication ;
      dsw:indicationType "{{indication.indicationType}}" ;
      dsw:answered "{{indication.answeredQuestions}}"^^xsd:integer ;
      dsw:unanswered "{{indication.unansweredQuestions}}"^^xsd:integer ]
      {%- if not loop.last -%} ,
      {%- else -%} .
      {%- endif -%}
  {%- endfor -%}
{%- endif -%}

{#- ------------------------------------------------------------------------------------ -#}
{#-  CHAPTER REPORT                                                                      -#}
{#- ------------------------------------------------------------------------------------ #}

{%- for chapterReport in ctx.report.chapterReports %}

{{ renderChapterReport(chapterReport, loop.index) }}
{% endfor %}

{#- ------------------------------------------------------------------------------------ -#}
{#-  KNOWLEDGE MODEL                                                                     -#}
{#- ------------------------------------------------------------------------------------ #}

km:{{ ctx.knowledgeModel.uuid }} a dsw:KnowledgeModel ;
  dsw:uuid "{{ctx.knowledgeModel.uuid}}" ;
  dsw:knowledgeModelId "{{ctx.package.kmId}}" ;
  dsw:title {{ctx.package.name|tojson}} ;
  dsw:description {{ctx.package.description|tojson}} ;
  dsw:version "{{ctx.package.version}}" ;
  dsw:createdAt "{{ctx.package.createdAt}}"^^xsd:dateTime ;
  {%- set chapters = renderList(ctx.knowledgeModel.chapterUuids, "km:", "") -%}
  {%- if chapters|length > 0 %}
  dsw:containsChapter {{ chapters.split(',')|join(", ")}}
  {%- endif %}

  {%- set integrations = renderList(ctx.knowledgeModel.integrationUuids, "km:", "") -%}
  {%- if integrations|length > 0 %} ;
  dsw:containsIntegration {{ integrations.split(',')|join(", ")}} 
  {%- endif %}
  
  {%- set metrics = renderList(ctx.knowledgeModel.metricUuids, "km:", "") -%}
  {%- if metrics|length > 0 %} ;
  dsw:containsMetric {{ metrics.split(',')|join(", ")}}
  {%- endif %}

  {%- set phases = renderList(ctx.knowledgeModel.phaseUuids, "km:", "") -%}
  {%- if phases|length > 0 %} ;
  dsw:containsPhase {{ phases.split(',')|join(", ")}}
  {%- endif %}

  {%- if ctx.knowledgeModel.annotations %} ;
  {{ renderAnnotation(ctx.knowledgeModel.annotations) }}
  {%- endif -%}

  {%- set tags = renderList(ctx.knowledgeModel.tagUuids, "km:", "") -%}
  {%- if tags|length > 0 %} ;
  dsw:containsTag {{ tags.split(',')|join(", ")}}
  {%- endif -%} .
  
{#- ------------------------------------------------------------------------------------ -#}
{#-  CHAPTER                                                                             -#}
{#- ------------------------------------------------------------------------------------ -#}

{%- for chapterUuid in ctx.knowledgeModel.chapterUuids -%}
  {%- set chapter = ctx.knowledgeModel.entities.chapters[chapterUuid] %}

{{ renderChapter(chapter, loop.index) }}
{%- endfor -%}

{#- ------------------------------------------------------------------------------------ -#}
{#-  METRIC                                                                              -#}
{#- ------------------------------------------------------------------------------------ -#}

{%- for metricUuid in ctx.knowledgeModel.metricUuids -%}
  {%- set metric = ctx.knowledgeModel.entities.metrics[metricUuid] %}

{{ renderMetric(metric, loop.index) }}
{%- endfor -%}

{#- ------------------------------------------------------------------------------------ -#}
{#-  PHASE                                                                               -#}
{#- ------------------------------------------------------------------------------------ -#}

{%- for phaseUuid in ctx.knowledgeModel.phaseUuids -%}
  {%- set phase = ctx.knowledgeModel.entities.phases[phaseUuid] %}

{{ renderPhase(phase, loop.index) }}
{%- endfor -%}

{#- ------------------------------------------------------------------------------------ -#}
{#-  TAG                                                                                 -#}
{#- ------------------------------------------------------------------------------------ -#}

{%- for tagUuid in ctx.knowledgeModel.tagUuids -%}
  {%- set tag = ctx.knowledgeModel.entities.tags[tagUuid] %}

{{ renderTag(tag, loop.index) }}
{%- endfor -%}

{#- ------------------------------------------------------------------------------------ -#}
{#-  QUESTION                                                                            -#}
{#- ------------------------------------------------------------------------------------ -#}

{%- set optionsQuestionAnswerUuidParent = {} -%} {# Dict kde key je uuid answer a value je uuid otazky, ktera je jeji parent #}
{%- set multiChoiceQuestionChoiceUuidParent = {} -%} {# Dict kde key je uuid choice a value je uuid otazky, ktera je jeji parent #}
{%- set questionExpertUuidParent = {} -%} {# Dict kde key je uuid expert a value je uuid otazky, ktera je jeji parent #}
{%- set questionReferenceUuidParent = {} -%} {# Dict kde key je uuid reference a value je uuid otazky, ktera je jeji parent #}

{%- set expertOrder = {} -%}
{%- set answerOrder = {} -%}
{%- set choiceOrder = {} -%}
{%- set referenceOrder = {} -%}

{%- for chapterUuid in ctx.knowledgeModel.entities.chapters -%}
  {%- set chapter = ctx.knowledgeModel.entities.chapters[chapterUuid] -%}
  {%- for questionUuid in chapter.questionUuids -%}
    {%- set question = ctx.knowledgeModel.entities.questions[questionUuid] -%}
    {{renderQuestionType(question, chapterUuid, loop.index)}}
  {%- endfor -%}
{%- endfor -%}

{#- ------------------------------------------------------------------------------------ -#}
{#-  EXPERT                                                                              -#}
{#- ------------------------------------------------------------------------------------ -#}

{%- for expertUuid in ctx.knowledgeModel.entities.experts -%}
  {%- set expert = ctx.knowledgeModel.entities.experts[expertUuid] %}

{{ renderExpert(expert, loop.index) }}
{%- endfor -%}

{#- ------------------------------------------------------------------------------------ -#}
{#-  CHOICE                                                                              -#}
{#- ------------------------------------------------------------------------------------ -#}

{%- for choiceUuid in ctx.knowledgeModel.entities.choices -%}
  {%- set choice = ctx.knowledgeModel.entities.choices[choiceUuid] %}

{{ renderChoice(choice, loop.index) }}
{%- endfor -%}

{#- ------------------------------------------------------------------------------------ -#}
{#-  ANSWER                                                                              -#}
{#- ------------------------------------------------------------------------------------ -#}

{%- for answerUuid in ctx.knowledgeModel.entities.answers -%}
  {%- set answer = ctx.knowledgeModel.entities.answers[answerUuid] %}

{{ renderAnswer(answer, loop.index) }}
{%- endfor -%}

{#- ------------------------------------------------------------------------------------ -#}
{#-  REFERENCE                                                                           -#}
{#- ------------------------------------------------------------------------------------ -#}

{%- for referenceUuid in ctx.knowledgeModel.entities.references -%}
  {%- set reference = ctx.knowledgeModel.entities.references[referenceUuid] -%}
    {%- if reference.referenceType == "URLReference" %}
    
{{ renderURLReference(reference, loop.index) }}

    {%- elif reference.referenceType == "ResourcePageReference" %}
    
{{ renderResourcePageReference(reference, loop.index) }}

    {%- endif %}
{%- endfor -%}

{#- ------------------------------------------------------------------------------------ -#}
{#-  INTEGRATION                                                                            -#}
{#- ------------------------------------------------------------------------------------ -#}

{%- for integrationUuid in ctx.knowledgeModel.integrationUuids -%}
  {%- set integration = ctx.knowledgeModel.entities.integrations[integrationUuid] %}
  {%- if integration.integrationType == "ApiIntegration" %}
  
{{ renderAPIIntegration(integration, loop.index) }}

  {%- elif integration.integrationType == "WidgetIntegration" %}
  
{{ renderWidgetIntegration(integration, loop.index) }}
{%- endif -%}

{%- endfor -%}

{#- ------------------------------------------------------------------------------------ -#}
{#-  REPLY                                                                               -#}
{#- ------------------------------------------------------------------------------------ -#}

{%- set simpleAuthors = {} -%}

{%- for replyPath in ctx.questionnaireReplies -%}
  
  {%- set reply = ctx.questionnaireReplies[replyPath] -%}
  {%- if reply.value.type == "StringReply" %}

  {{renderStringReply(replyPath, reply, loop.index)}}

  {%- elif reply.value.type == "ItemListReply"%}

  {{renderItemListReply(replyPath, reply, loop.index)}}

  {%- elif reply.value.type == "IntegrationReply"%}

  {{renderIntegrationReply(replyPath, reply, loop.index)}}

  {%- elif reply.value.type == "MultiChoiceReply"%}

  {{renderMultiChoiceReply(replyPath, reply,loop.index)}}

  {%- elif reply.value.type == "AnswerReply"%}

  {{renderAnswerReply(replyPath, reply, loop.index)}}

  {%- endif %}
{%- endfor %}

{#- ------------------------------------------------------------------------------------ -#}
{#-  USER                                                                                -#}
{#- ------------------------------------------------------------------------------------ -#}

{%- for simpleAuthorsItem in simpleAuthors -%}
{%- if simpleAuthorsItem != ctx.createdBy.uuid -%}
{%- set simpleAuthor = simpleAuthors[simpleAuthorsItem] -%}
user:{{simpleAuthor.uuid}} a dsw:User;
  dsw:uuid "{{simpleAuthor.uuid}}" ;
  dsw:firstName {{simpleAuthor.firstName|tojson}} ;
  dsw:lastName {{simpleAuthor.lastName|tojson}} ;
  {%- if simpleAuthor.imageUrl %}
  dsw:imageUrl "{{simpleAuthor.imageUrl}}"^^schema:URL ;
  {%- endif -%}
{%- endif -%}
{%- endfor -%}

{%- set user = ctx.createdBy %}

user:{{user.uuid}} a dsw:User ;
  dsw:uuid "{{user.uuid}}" ;
  dsw:firstName {{user.firstName|tojson}} ;
  dsw:lastName {{user.lastName|tojson}} ;
  {%- if user.imageUrl %}
  dsw:imageUrl "{{user.imageurl}}" ;
  {%- endif %}
  dsw:email {{user.email|tojson}};
  dsw:role {{user.role|tojson}} ;
  
  {%- if user.affiliation %}
  dsw:affiliation {{user.affiliation}} ;
  {%- endif -%}

  {%- set premissions = renderList(user.premissions, '"', '"') -%}
  {%- if premissions|length > 0 %}
  dsw:premission {{ premissions.split(',')|join(", ")}} .
  {%- endif -%}
  
  {%- set sources = renderList(user.sources, '"', '"') -%}
  {%- if sources|length > 0 %}
  dsw:source {{ sources.split(',')|join(", ")}} ;
  {%- endif %}
  dsw:createdAt "{{user.createdAt}}"^^xsd:dateTime ;
  dsw:updatedAt "{{user.updatedAt}}"^^xsd:dateTime .
